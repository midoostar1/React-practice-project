{"ast":null,"code":"var _jsxFileName = \"/Users/midoostar1/Desktop/udemy-practice-project/investment-calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport FormInput from \"./components/FormInput\";\nimport InvestmentTable from \"./components/InvestmentTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [calculatedData, setCalculatedData] = useState([]);\n  const [currentSavings, setCurrentSavings] = useState(null);\n  const calculateHandler = userInput => {\n    console.log(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n    setCurrentSavings(currentSavings);\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n\n    setCalculatedData([...yearlyData]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n      onFormSubmit: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentTable, {\n      data: calculatedData,\n      initialInvestment: currentSavings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j25krzpMBiYe6mxZmhD+Dwmo7Y8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","FormInput","InvestmentTable","jsxDEV","_jsxDEV","App","_s","calculatedData","setCalculatedData","currentSavings","setCurrentSavings","calculateHandler","userInput","console","log","yearlyData","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onFormSubmit","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/midoostar1/Desktop/udemy-practice-project/investment-calculator/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport FormInput from \"./components/FormInput\";\nimport InvestmentTable from \"./components/InvestmentTable\";\n\nfunction App() {\n  const [calculatedData, setCalculatedData] = useState([]);\n  const [currentSavings, setCurrentSavings] = useState(null);\n\n  const calculateHandler = (userInput) => {\n    console.log(userInput);\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    \n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n    setCurrentSavings(currentSavings)\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n\n    setCalculatedData([...yearlyData]);\n  };\n\n  return (\n    <div>\n      <Header />\n      <FormInput onFormSubmit={calculateHandler} />\n      <InvestmentTable data={calculatedData} initialInvestment = {currentSavings}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,eAAe,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE1D,MAAMY,gBAAgB,GAAIC,SAAS,IAAK;IACtCC,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB;IACA;;IAGA,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIN,cAAc,GAAG,CAACG,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMI,kBAAkB,GAAG,CAACJ,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMK,cAAc,GAAG,CAACL,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMM,QAAQ,GAAG,CAACN,SAAS,CAAC,UAAU,CAAC;IACvCF,iBAAiB,CAACD,cAAc,CAAC;;IAEjC;IACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGX,cAAc,GAAGQ,cAAc;MACtDR,cAAc,IAAIW,cAAc,GAAGJ,kBAAkB;MACrDD,UAAU,CAACM,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEd,cAAc;QAChCO,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;;IAEAR,iBAAiB,CAAC,CAAC,GAAGO,UAAU,CAAC,CAAC;EACpC,CAAC;EAED,oBACEX,OAAA;IAAAoB,QAAA,gBACEpB,OAAA,CAACJ,MAAM;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVxB,OAAA,CAACH,SAAS;MAAC4B,YAAY,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7CxB,OAAA,CAACF,eAAe;MAAC4B,IAAI,EAAEvB,cAAe;MAACwB,iBAAiB,EAAItB;IAAe;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1E,CAAC;AAEV;AAACtB,EAAA,CA3CQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}